/**
 ******************************************************************************
 * @file       fw_core.h
 * @author     yearnext
 * @version    1.0.0
 * @date       2017-01-10
 * @brief      framework core head files
 * @par        paltform
 *                 Windows
 * @par        compiler
 *                 GCC
 ******************************************************************************
 * @note
 * 1.XXXXX
 ******************************************************************************
 */

/**
 * @defgroup framework core
 * @{
 */
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __FRAMEWORK_CORE_H__
#define __FRAMEWORK_CORE_H__

/* Add c++ compatibility------------------------------------------------------*/
#ifdef __cplusplus
extern "C"
{
#endif

/* Includes ------------------------------------------------------------------*/
#include <stdint.h>
#include <stdbool.h>
#include <intrinsics.h>
    
/* Exported types ------------------------------------------------------------*/
/**
 *******************************************************************************
 * @brief       define base type
 *******************************************************************************
 */
#ifndef _STDINT
typedef unsigned char           uint8_t;
typedef unsigned int            uint16_t;
typedef unsigned long           uint32_t;

typedef char                    int8_t;
typedef int                     int16_t;
typedef long                    int32_t;   
#endif

/**
 *******************************************************************************
 * @brief       define bool type
 *******************************************************************************
 */
#ifndef _STDBOOL
typedef enum
{
   false = 0,
   true = 1,
}bool;
#endif

/**
 *******************************************************************************
 * @brief       define framework error type
 *******************************************************************************
 */
typedef enum
{
    FW_ERR_NONE,
    FW_ERR_FAIL,
    
    FW_ERR_NOT_READY,
    FW_ERR_NOT_SUPPORT,
    
    FW_ERR_INVAILD_PTR,
    FW_ERR_INVAILD_PARAM,

    FW_ERR_IO,
    FW_ERR_SPILL,
    FW_ERR_BUG,
    FW_ERR_UNKNOW,
}fw_err_t;

/**
 *******************************************************************************
 * @brief       define null
 *******************************************************************************
 */
#ifndef NULL
#define NULL ((void *)0)
#endif

/**
 *******************************************************************************
 * @note        define interrupt function
 *******************************************************************************
 */
#define _ENTER_CRITICAL()                                  __disable_interrupt()
#define _EXIT_CRITICAL()                                    __enable_interrupt()

#define _ATOM_CODE_BEGIN()                                     _ENTER_CRITICAL()
#define _ATOM_CODE_END()                                        _EXIT_CRITICAL()

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */
#define Name2String(name)                (#name)

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */
#define CalTypeByteSize(type)            (sizeof(type) / sizeof(unsigned char))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */
#define CalTypeBitSize(type)             (CalTypeByteSize(type) * 8)

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */
#define CalRemainder(dividend,divisor)   ((dividend)%(divisor))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */
#define CheckRemainder(dividend,divisor) ((((dividend)%(divisor)) != 0 ) \
                                             ? (1) : (0))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */    
#define IS_PTR_NULL(ptr)                                  ((ptr) == ((void *)0))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */  
#define _INLINE_STATEMENT(n)             do                                    \
                                         {                                     \
                                             n                                 \
                                         }while(0)

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */ 
#define _INLINE_MACRO_FUNCTION(code)                                      {code}
                                         
/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */                                           
#define _INLINE_PARAM_CHECK(n) _INLINE_MACRO_FUNCTION(if((n)) return _ERR_FAIL;)

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _SET_BIT(REG, BIT)                                      ((REG) |= (BIT))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _CLR_BIT(REG, BIT)                                     ((REG) &= ~(BIT))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _READ_BIT(REG, BIT)                                      ((REG) & (BIT))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _CLEAR_REG(REG)                                          ((REG) = (0))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _WRITE_REG(REG, VAL)                                     ((REG) = (VAL))

/**
 *******************************************************************************
 * @brief      MACRO
 *******************************************************************************
 */     
#define _READ_REG(REG)                                                   ((REG))
                                             
/* Add c++ compatibility------------------------------------------------------*/
#ifdef __cplusplus
}
#endif
	
#endif       /** end include define */

/** @}*/     /** framework type */

/**********************************END OF FILE*********************************/
